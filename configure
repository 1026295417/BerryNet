#!/bin/bash
#
# Copyright 2017 DT42
#
# This file is part of BerryNet.
#
# BerryNet is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# BerryNet is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with BerryNet.  If not, see <http://www.gnu.org/licenses/>.

# One-click IoT gateway deployment script.

set -e

LOG="$PWD/berrynet-install.log"
DISTRIBUTIONID=`lsb_release -i -s`
#INSTALL_DARKFLOW="N"
INSTALL_DARKNET_NNPACK="Y"
INSTALL_DARKNET="N"
INSTALL_TENSORFLOW="N"
INSTALL_CAFFE2="N"
INSTALL_OPENVINO="N"


install_system_dependencies() {
    sudo apt-get update
    sudo apt-get install -y \
        curl \
        fswebcam \
        git \
        imagemagick \
        libkrb5-dev \
        libyaml-dev \
        libzmq3-dev \
        lsb-release \
        mongodb \
        mosquitto \
        mosquitto-clients \
        python3-dev \
        python3-pip \
        supervisor \
        wget
    sudo service mongodb start
    sudo -H pip3 install \
        cython \
        logzero \
        paho-mqtt \
        watchdog
}

install_berrynet_repository() {
    sudo apt-get update
    sudo apt-get install -y dirmngr
    sudo cp config/berrynet.list /etc/apt/sources.list.d
    sudo apt-key adv --keyserver keyserver.ubuntu.com --recv C0C4CC4C
    sudo apt update
}

install_nodejs() {
    # v10.x is LTS, if you want the latest feature, change to "setup_11.x".
    curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
    sudo apt-get install -y nodejs
}

install_opencv() {
    sudo add-apt-repository -yu ppa:timsc/opencv-3.4
    sudo apt install -y python3-opencv
}

# TODO: Retire Darkflow
#install_darkflow() {
#    git submodule init
#    git submodule update
#
#    # build cython-implemented library
#    pushd inference/darkflow > /dev/null
#    python setup.py build_ext --inplace
#    # add color index in the inference result for drawing bounding boxes
#    patch -p 1 < ../../patch/darkflow/darkflow-app-example.patch
#    cp ../detection_server.py .
#    # install darkflow system-wide
#    sudo pip install .
#
#    popd > /dev/null
#}

install_darknet_nnpack() {
    # To understand how these packages are built, please refer to
    # https://github.com/DT42/BerryNet/blob/master/doc/darknet-nnpack.md
    sudo apt install -y darknet libdarknet
}

install_darknet() {
    local peachpy_version="0.0.1"
    local confu_version="cc90068"
    local ninja_version="v1.8.2"
    local nnpack_darknet_version="1ecda10"
    local darknet_nnpack_version="fa5bddc"

    # build dependencies
    pip3 install --user PeachPy==$peachpy_version
    pip3 install --user git+https://github.com/Maratyszcza/confu@$confu_version

    pushd /tmp > /dev/null
    git clone https://github.com/ninja-build/ninja.git
    pushd ninja > /dev/null
    git reset --hard $ninja_version
    ./configure.py --bootstrap
    popd > /dev/null
    popd > /dev/null

    sudo apt-get install -y clang

    pushd /tmp > /dev/null
    git clone https://github.com/thomaspark-pkj/NNPACK-darknet.git
    pushd NNPACK-darknet > /dev/null
    git reset --hard $nnpack_darknet_version
    $HOME/.local/bin/confu setup
    python ./configure.py --backend auto
    /tmp/ninja/ninja
    sudo cp lib/{libgoogletest-core.a,libnnpack.a,libpthreadpool.a} /usr/lib/
    sudo cp include/nnpack.h /usr/include/
    sudo cp deps/pthreadpool/include/pthreadpool.h /usr/include/
    popd > /dev/null
    popd > /dev/null

    # build detection backend (darknet)
    pushd inference > /dev/null
    git clone https://github.com/thomaspark-pkj/darknet-nnpack.git darknet
    pushd darknet > /dev/null
    git reset --hard $darknet_nnpack_version
    patch -p 1 < ../../patch/01-detection-backend.patch
    make -j
    popd > /dev/null
    popd > /dev/null

    cp utils/darknet/detectord.py inference/darknet
    mkdir inference/darknet/utils
    cp utils/darknet/utils/localrun.sh inference/darknet/utils
}

download_detector_model() {
    sudo apt install -y tinyyolovoc
}

install_tensorflow() {
    if [ x"$DISTRIBUTIONID" = x"Ubuntu" ]; then
	sudo -H pip3 install tensorflow
    elif [ x"$DISTRIBUTIONID" = x"Raspbian" ]; then
	TENSORFLOW_VERSION="1.0.1"
	TENSORFLOW_PKGNAME="tensorflow-${TENSORFLOW_VERSION}-cp27-none-linux_armv7l.whl"
	if [ ! -e "$TENSORFLOW_PKGNAME" ]; then
            wget https://github.com/samjabrahams/tensorflow-on-raspberry-pi/releases/download/v${TENSORFLOW_VERSION}/$TENSORFLOW_PKGNAME
	else
            echo "$TENSORFLOW_PKGNAME has existed, skip to download it."
	fi
	sudo -H pip3 install $TENSORFLOW_PKGNAME
    fi
}

download_classifier_model() {
    # Inception v3 is default classifier model
    INCEPTION_PKGNAME=inception_dec_2015.zip
    pushd inference > /dev/null
    mkdir -p image
    if [ ! -e model ]; then
        mkdir model
        pushd model > /dev/null
        wget https://storage.googleapis.com/download.tensorflow.org/models/$INCEPTION_PKGNAME
        unzip $INCEPTION_PKGNAME
        mv imagenet_comp_graph_label_strings.txt output_labels.txt
        mv tensorflow_inception_graph.pb output_graph.pb
        popd > /dev/null
    fi
    popd > /dev/null
}

install_caffe2() {
    if [ x"$DISTRIBUTIONID" = x"Ubuntu" ]; then
	sh ./utils/install-caffe2-ubuntu.sh
    elif [ x"$DISTRIBUTIONID" = x"Raspbian" ]; then
	sh ./utils/install-caffe2-raspbian.sh
    fi
}

download_classifier_model_caffe2() {
    sh ./utils/install-caffe2-models.sh
}

install_openvino() {
    OPENVINO_VERSION="2018.5.445"
    OPENVINO_INSTALLDIR="/opt/intel/computer_vision_sdk_$OPENVINO_VERSION"
    sudo apt install -y \
        intel-ie-samples-$OPENVINO_VERSION \
        intel-inference-engine-cpu-$OPENVINO_VERSION \
        intel-inference-engine-rt-$OPENVINO_VERSION \
        intel-inference-engine-sdk-$OPENVINO_VERSION \
        intel-inference-engine-vpu-$OPENVINO_VERSION \
        intel-model-optimizer-$OPENVINO_VERSION \
        intel-openvino-base-pset-$OPENVINO_VERSION \
        intel-setupvars-$OPENVINO_VERSION \
        mobilenet-1.0-224-openvino
    sudo sed -i "s%<INSTALLDIR>%${OPENVINO_INSTALLDIR}%g" \
        $OPENVINO_INSTALLDIR/bin/setupvars.sh
}

install_configs() {
    # systemd
    sudo cp systemd/* /etc/systemd/system

    # supervisor
    sudo cp config/supervisor/conf.d/berrynet-darknet.conf /etc/supervisor/conf.d/
    sudo mkdir /var/log/berrynet

    # mosquitto
    sudo cp config/etc/mosquitto/conf.d/berrynet.conf /etc/mosquitto/conf.d

    if [ x"$DISTRIBUTIONID" = x"Raspbian" ]; then
        # Make RPi camera to show at /dev/videoN
        sudo cp config/bcm2835-v4l2.conf /etc/modules-load.d

        # Enable ramfs to speedup I/O
        #
        # NOTE: "IPC by file" was used in BerryNet v2 and
        #       has been dropped in v3.
        echo -e "tmpfs /var/ramfs tmpfs nodev,nosuid,size=50M 0 0" \
            | sudo tee -a /etc/fstab
        sudo mount -a
    fi
}

install_berrynet_py() {
    sudo apt install -y berrynet
    # FIXME: Freeboard dependency
    sudo npm install -g mime
}

install_berrynet_js() {
    local working_dir="/usr/local/berrynet"
    sudo mkdir -p $working_dir
    sudo cp -a \
        broker.js \
        camera.js \
        config.js \
        data_collector.js \
        inference \
        journal.js \
        localimg.js \
        mail.js \
        line.js \
        package.json \
        $working_dir
    sudo cp berrynet-manager /usr/local/bin
    # FIXME: image dir should be created by program
    mkdir -p /usr/local/berrynet/inference/image
    # install npm dependencies
    pushd $working_dir > /dev/null
    sudo npm install --unsafe-perm
    popd > /dev/null
}

update_system_service() {
    sudo service mosquitto restart
}

install_system_dependencies 2>&1 | tee -a $LOG
install_berrynet_repository 2>&1 | tee -a $LOG
install_nodejs 2>&1 | tee -a $LOG
install_opencv 2>&1 | tee -a $LOG
install_configs 2>&1 | tee -a $LOG
install_berrynet_py 2>&1 | tee -a $LOG
install_berrynet_js 2>&1 | tee -a $LOG

if [ "$INSTALL_DARKNET_NNPACK" = "Y" ]; then
    install_darknet_nnpack 2>&1 | tee -a $LOG
    download_detector_model 2>&1 | tee -a $LOG
else
    echo "Not install Darknet NNPACK" >> $LOG
fi

if [ "$INSTALL_DARKNET" = "Y" ]; then
    install_darknet 2>&1 | tee -a $LOG
    download_detector_model 2>&1 | tee -a $LOG
else
    echo "Not install Darknet" >> $LOG
fi

if [ "$INSTALL_TENSORFLOW" = "Y" ]; then
    install_tensorflow 2>&1 | tee -a $LOG
    download_classifier_model 2>&1 | tee -a $LOG
else
    echo "Not install TensorFlow" >> $LOG
fi

#if [ "$INSTALL_DARKFLOW" = "Y" ]; then
#    install_darkflow 2>&1 | tee -a $LOG
#else
#    echo "Not install Darkflow" >> $LOG
#fi

if [ "$INSTALL_CAFFE2" = "Y" ]; then
    install_caffe2 2>&1 | tee -a $LOG
    download_classifier_model_caffe2 2>&1 | tee -a $LOG
else
    echo "Not install Caffe2" >> $LOG
fi

if [ "$INSTALL_OPENVINO" = "Y" ]; then
    install_openvino 2>&1 | tee -a $LOG
else
    echo "Not install OpenVINO" >> $LOG
fi

update_system_service 2>&1 | tee -a $LOG

{
    echo "Installation is completed successfully!"
    echo ""
    echo "If there is any issue, please open an issue on"
    echo ""
    echo "    https://github.com/DT42/BerryNet/issues"
    echo ""
    echo "and attach these logs:"
    echo ""
    echo "    $LOG"
    echo "    /usr/local/berrynet/npm-debug.log"
    echo ""
    echo "We are happy to check and fix it, thank you!"
} | tee -a $LOG
